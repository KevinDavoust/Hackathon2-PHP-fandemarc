{% extends 'base.html.twig' %}

{% block title %}Etape 3 : modèle{% endblock %}

{% block body %}
    <svg class="sticker" id="stickerRAM" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
        <defs>
            <filter id="sticker-effect" x="-50%" y="-50%" width="200%" height="200%">
                <feOffset in="SourceAlpha" dx="2" dy="4"/>
                <feGaussianBlur stdDeviation="4"/>
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.3"/>
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        <circle cx="100" cy="100" r="90" fill="#ffab1d" filter="url(#sticker-effect)"/>
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="48px" fill="#f5f5f5">{{ RAM }} Go</text>
    </svg>

    <svg class="sticker" id="stickerStock" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
        <defs>
            <filter id="sticker-effect" x="-50%" y="-50%" width="200%" height="200%">
                <feOffset in="SourceAlpha" dx="2" dy="4"/>
                <feGaussianBlur stdDeviation="4"/>
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.3"/>
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        <circle cx="100" cy="100" r="90" fill="#489ED7" filter="url(#sticker-effect)"/>
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="48px" fill="#f5f5f5">{{ storage }} Go</text>
    </svg>

    <svg class="sticker" id="stickerBrand" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
        <defs>
            <filter id="sticker-effect" x="-50%" y="-50%" width="200%" height="200%">
                <feOffset in="SourceAlpha" dx="2" dy="4"/>
                <feGaussianBlur stdDeviation="4"/>
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.3"/>
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        <circle cx="100" cy="100" r="90" fill="#cf2e2e" filter="url(#sticker-effect)"/>
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="48px" fill="#f5f5f5">{{ brand }}</text>
    </svg>

    <div class="ec-model card mx-auto">
        <div class="col-8 m-auto">
            <h1 class="py-5">Quel est le modèle du téléphone ?</h1>
            {{ form_start(formModelEstimate) }}
            <div class="">
                {#{{ form_widget(formModelEstimate) }}#}
                {{ form_widget(formModelEstimate.name) }}
            </div>
            <div class="text-center p-5">
                <input class="ec-button" type="submit" value="Valider">
            </div>
            {{ form_end(formModelEstimate) }}
        </div>

        <p class="text-center">Si le modèle n'est pas présent dans la liste, merci de <a href="{{ path('app_contact') }}">contacter l'administrateur</a>.</p>
    </div>

    <script>
        /*const sticker = document.getElementsByClassName('sticker');

        // Check if the effect should be played
        const shouldPlayEffect = localStorage.getItem('playStickerEffect') === 'true';

        // Play the effect if necessary
        if (shouldPlayEffect) {
            playStickerEffect();
        }

        window.addEventListener('load', () => {
            // Play the effect and set the flag in localStorage
            playStickerEffect();
            localStorage.setItem('playStickerEffect', 'true');
        });

        function playStickerEffect() {
            gsap.timeline()
                .set(sticker, { scale: 0.8, opacity: 1 })
                .to(sticker, { scale: 1.2, duration: 0.2 })
                .to(sticker, { scale: 1, duration: 0.2 });
        }
*/
        const stickers = document.querySelectorAll('.sticker');

        function playStickerEffects() {
            let delay = 0;

            stickers.forEach((sticker, index) => {
                setTimeout(() => {
                    playStickerEffect(sticker);
                }, delay);

                // Increment the delay for the next sticker
                delay += 500; // Adjust the delay as needed
            });
        }

        function playStickerEffect(sticker) {
            gsap.timeline()
                .set(sticker, { scale: 0.8, opacity: 1 })
                .to(sticker, { scale: 1.2, duration: 0.2 })
                .to(sticker, { scale: 1, duration: 0.2 });
        }

        window.addEventListener('load', playStickerEffects);
    </script>

{% endblock %}
