{% extends 'base.html.twig' %}

{% block title %}Etape 4 : état{% endblock %}

{% block body %}

    <svg class="sticker new-sticker" id="stickerRAM" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
        <defs>
            <filter id="sticker-effect" x="-50%" y="-50%" width="200%" height="200%">
                <feOffset in="SourceAlpha" dx="2" dy="4"/>
                <feGaussianBlur stdDeviation="4"/>
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.3"/>
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        <circle cx="100" cy="100" r="90" fill="#ffab1d" filter="url(#sticker-effect)"/>
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="48px" fill="#f5f5f5">{{ RAM }} Go</text>
    </svg>

    <svg class="sticker" id="stickerStock" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
        <defs>
            <filter id="sticker-effect" x="-50%" y="-50%" width="200%" height="200%">
                <feOffset in="SourceAlpha" dx="2" dy="4"/>
                <feGaussianBlur stdDeviation="4"/>
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.3"/>
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        <circle cx="100" cy="100" r="90" fill="#489ED7" filter="url(#sticker-effect)"/>
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="48px" fill="#f5f5f5">{{ storage }} Go</text>
    </svg>

    <svg class="sticker" id="stickerBrand" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
        <defs>
            <filter id="sticker-effect" x="-50%" y="-50%" width="200%" height="200%">
                <feOffset in="SourceAlpha" dx="2" dy="4"/>
                <feGaussianBlur stdDeviation="4"/>
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.3"/>
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        <circle cx="100" cy="100" r="90" fill="#cf2e2e" filter="url(#sticker-effect)"/>
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="48px" fill="#f5f5f5">{{ brand }}</text>
    </svg>

    <svg class="sticker" id="stickerModel" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
        <defs>
            <filter id="sticker-effect" x="-50%" y="-50%" width="200%" height="200%">
                <feOffset in="SourceAlpha" dx="2" dy="4"/>
                <feGaussianBlur stdDeviation="4"/>
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.3"/>
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode/>
                    <feMergeNode in="SourceGraphic"/>
                </feMerge>
            </filter>
        </defs>
        <circle cx="100" cy="100" r="90" fill="#233D8D" filter="url(#sticker-effect)"/>
        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="24px" fill="#f5f5f5">{{ model }}</text>
    </svg>

<div class="ec-model card mx-auto ec-state">
    <h1 class="ec-form-title">État du téléphone</h1>
    {#<div class="ec-radios">#}
    {{ form_start(formStateEstimate) }}
        {% for state in states %}
            <div class="ec-radio">
                <input type="radio" id="radio{{loop.index }}" value="{{ state.type }}" name="{{ field_name(formStateEstimate.type) }}">
                <label for="radio{{loop.index }}" class="ec-label-state">
                    <h2>{{ state.type }}</h2>
                    <p class="ec-state-description">{{ state.description }}</p>
                </label>
            </div>
        {% endfor %}
    {#</div>#}
    <input type="submit" value="Valider" class="ec-button ec-button-state">
    {{ form_end(formStateEstimate) }}
</div>
    <script>
        const stickers = document.querySelectorAll('.sticker');

        function playStickerEffects() {
            let delay = 0;

            stickers.forEach((sticker, index) => {
                setTimeout(() => {
                    playStickerEffect(sticker);
                }, delay);

                // Increment the delay for the next sticker
                delay += 500; // Adjust the delay as needed
            });
        }

        function playStickerEffect(sticker) {
            gsap.timeline()
                .set(sticker, { scale: 0.8, opacity: 1 })
                .to(sticker, { scale: 1.2, duration: 0.2 })
                .to(sticker, { scale: 1, duration: 0.2 });
        }

        window.addEventListener('load', playStickerEffects);
    </script>
{% endblock %}